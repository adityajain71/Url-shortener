const express = require('express');
const router = express.Router();
const validUrl = require('valid-url');
const Url = require('../models/url');
const { generateShortCode } = require('../utils/codeGenerator');

/**
 * @route   POST /api/shorten
 * @desc    Create a short URL
 */
router.post('/shorten', async (req, res) => {
  // Get the original URL from request body
  const { originalUrl } = req.body;
  const baseUrl = process.env.BASE_URL;
  
  // Check if base URL is valid
  if (!validUrl.isUri(baseUrl)) {
    return res.status(401).json({ error: 'Invalid base URL' });
  }

  // Check if original URL is valid
  if (!validUrl.isUri(originalUrl)) {
    return res.status(400).json({ error: 'Invalid URL. Please provide a valid URL.' });
  }

  try {
    // Check if the URL already exists in the database
    let url = await Url.findOne({ original_url: originalUrl });

    if (url) {
      // Return the existing shortened URL
      return res.json({
        id: url._id,
        success: true,
        shortUrl: `${baseUrl}/${url.short_code}`,
        shortCode: url.short_code,
        originalUrl: url.original_url,
        clicks: url.clicks,
        createdAt: url.created_at
      });
    }

    // Generate a short code
    const shortCode = generateShortCode();
    
    // Create a new URL record
    url = new Url({
      original_url: originalUrl,
      short_code: shortCode,
    });

    // Save to database
    await url.save();
    
    // Return the shortened URL and details
    res.json({
      id: url._id,
      success: true,
      shortUrl: `${baseUrl}/${shortCode}`,
      shortCode,
      originalUrl: url.original_url,
      clicks: url.clicks,
      createdAt: url.created_at
    });

  } catch (err) {
    console.error('Server error:', err);
    res.status(500).json({ error: 'Server error. Please try again later.' });
  }
});

/**
 * @route   GET /api/urls
 * @desc    Get all URLs
 */
router.get('/urls', async (req, res) => {
  try {
    const urls = await Url.find().sort({ created_at: -1 });
    
    // Transform the data for frontend
    const formattedUrls = urls.map(url => ({
      id: url._id,
      shortCode: url.short_code,
      shortUrl: `${process.env.BASE_URL}/${url.short_code}`,
      originalUrl: url.original_url,
      clicks: url.clicks,
      createdAt: url.created_at
    }));
    
    res.json(formattedUrls);
  } catch (err) {
    console.error('Server error:', err);
    res.status(500).json({ error: 'Server error. Please try again later.' });
  }
});

/**
 * @route   GET /api/urls/:id
 * @desc    Get a specific URL by ID
 */
router.get('/urls/:id', async (req, res) => {
  try {
    const url = await Url.findById(req.params.id);
    
    if (!url) {
      return res.status(404).json({ error: 'URL not found' });
    }
    
    // Format the URL for frontend
    const formattedUrl = {
      id: url._id,
      shortCode: url.short_code,
      shortUrl: `${process.env.BASE_URL}/${url.short_code}`,
      originalUrl: url.original_url,
      clicks: url.clicks,
      createdAt: url.created_at
    };
    
    res.json(formattedUrl);
  } catch (err) {
    console.error('Server error:', err);
    
    // Handle invalid ObjectId error
    if (err.kind === 'ObjectId') {
      return res.status(404).json({ error: 'URL not found' });
    }
    
    res.status(500).json({ error: 'Server error. Please try again later.' });
  }
});

/**
 * @route   PUT /api/urls/:id
 * @desc    Update a URL
 */
router.put('/urls/:id', async (req, res) => {
  const { shortCode, originalUrl } = req.body;
  
  // Validate inputs
  if (!shortCode || !originalUrl) {
    return res.status(400).json({ error: 'Short code and original URL are required' });
  }
  
  // Check if original URL is valid
  if (!validUrl.isUri(originalUrl)) {
    return res.status(400).json({ error: 'Invalid URL. Please provide a valid URL.' });
  }
  
  try {
    // Check if the short code is already taken by another URL
    const existingUrl = await Url.findOne({ 
      short_code: shortCode,
      _id: { $ne: req.params.id }
    });
    
    if (existingUrl) {
      return res.status(400).json({ error: 'Short code is already in use' });
    }
    
    // Update the URL
    const url = await Url.findByIdAndUpdate(
      req.params.id,
      { 
        original_url: originalUrl,
        short_code: shortCode
      },
      { new: true }
    );
    
    if (!url) {
      return res.status(404).json({ error: 'URL not found' });
    }
    
    // Format the updated URL for frontend
    const formattedUrl = {
      id: url._id,
      shortCode: url.short_code,
      shortUrl: `${process.env.BASE_URL}/${url.short_code}`,
      originalUrl: url.original_url,
      clicks: url.clicks,
      createdAt: url.created_at
    };
    
    res.json(formattedUrl);
  } catch (err) {
    console.error('Server error:', err);
    
    // Handle invalid ObjectId error
    if (err.kind === 'ObjectId') {
      return res.status(404).json({ error: 'URL not found' });
    }
    
    res.status(500).json({ error: 'Server error. Please try again later.' });
  }
});

/**
 * @route   DELETE /api/urls/:id
 * @desc    Delete a URL
 */
router.delete('/urls/:id', async (req, res) => {
  try {
    const url = await Url.findByIdAndDelete(req.params.id);
    
    if (!url) {
      return res.status(404).json({ error: 'URL not found' });
    }
    
    res.json({ message: 'URL deleted successfully' });
  } catch (err) {
    console.error('Server error:', err);
    
    // Handle invalid ObjectId error
    if (err.kind === 'ObjectId') {
      return res.status(404).json({ error: 'URL not found' });
    }
    
    res.status(500).json({ error: 'Server error. Please try again later.' });
  }
});

module.exports = router;
